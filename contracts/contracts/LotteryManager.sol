// SPDX-License-Identifier: MIT
pragma solidity ^0.8.20;

import "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol";
import "@chainlink/contracts/src/v0.8/vrf/VRFConsumerBaseV2.sol";
import "@openzeppelin/contracts/access/Ownable.sol";
import "./interfaces/ILotteryManager.sol";
import "./interfaces/IAdsManager.sol";

/**
 * @title LotteryManager
 * @author Andrea Tedesco (@andreatedesco).
 * @dev Manages lottery functionality using Chainlink VRF for random number generation.
 */
contract LotteryManager is Ownable, VRFConsumerBaseV2, ILotteryManager {
    // =============================================================
    //                           STATE VARIABLES
    // =============================================================

    // The AdsManager contract to interact with.
    IAdsManager public adsManager;

    // The Chainlink VRF Coordinator contract.
    VRFCoordinatorV2Interface public vrfCoordinator;

    // Subscription ID for Chainlink VRF.
    uint64 public subscriptionId = 791;

    // KeyHash for Chainlink VRF.
    bytes32 public keyHash =
        0x354d2f95da55398f44b7cff77da56283d9c6c829a4bdf1bbcaf2ad6a4d081f61;

    // Gas limit for Chainlink VRF callback.
    uint32 public callbackGasLimit = 40000;
    
    // Number of confirmations required for Chainlink VRF requests.
    uint16 public requestConfirmations = 3;

    // Number of random words requested from Chainlink VRF.
    uint32 private _numWords = 1;

    // =============================================================
    //                          CONSTRUCTOR
    // =============================================================

    /**
     * @dev Constructor that sets the contract owner and initializes Chainlink VRF.
     */
    constructor()
        Ownable(_msgSender())
        VRFConsumerBaseV2(0x2eD832Ba664535e5886b75D64C46EB9a228C2610)
    {
        vrfCoordinator = VRFCoordinatorV2Interface(
            0x2eD832Ba664535e5886b75D64C46EB9a228C2610
        );
    }

    // =============================================================
    //                         PUBLIC FUNCTIONS
    // =============================================================

    /**
     * @dev Starts a new lottery by requesting random words from Chainlink VRF.
     * @return requestId The ID of the Chainlink VRF request.
     */
    function startLottery() public returns (uint256 requestId) {
        // Ensures only the AdsManager contract can start a lottery.
        require(_msgSender() == address(adsManager));

        // Requests random words from Chainlink VRF.
        requestId = vrfCoordinator.requestRandomWords(
            keyHash,
            subscriptionId,
            requestConfirmations,
            callbackGasLimit,
            _numWords
        );
    }

    // =============================================================
    //                         INTERNAL FUNCTIONS
    // =============================================================

    /**
     * @dev Callback function called by Chainlink VRF upon generating random words.
     * @param requestId The ID of the Chainlink VRF request.
     * @param randomWords Array of random words generated by Chainlink VRF.
     */
    function fulfillRandomWords(
        uint256 requestId,
        uint256[] memory randomWords
    ) internal override {
        // Sets the lottery winner using the first random word.
        adsManager.setLotteryWinner(requestId, randomWords[0]);
    }

    // =============================================================
    //                         OWNER FUNCTIONS
    // =============================================================

    /**
     * @dev Updates the address of the AdsManager contract.
     * @param adsManager_ The new address of the AdsManager contract.
     */
    function updateAdsManager(address adsManager_) external onlyOwner {
        adsManager = IAdsManager(adsManager_);
    }

    /**
     * @dev Updates the subscription ID for Chainlink VRF.
     * @param subscriptionId_ The new subscription ID.
     */
    function updateSubscriptionId(uint64 subscriptionId_) external onlyOwner {
        subscriptionId = subscriptionId_;
    }

    /**
     * @dev Updates the address of the Chainlink VRF Coordinator contract.
     * @param vrfCoordinator_ The new address of the Chainlink VRF Coordinator contract.
     */
    function updateCordinator(address vrfCoordinator_) external onlyOwner {
        vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinator_);
    }

    /**
     * @dev Updates the key hash for Chainlink VRF.
     * @param keyHash_ The new key hash.
     */
    function updateKeyHash(bytes32 keyHash_) external onlyOwner {
        keyHash = keyHash_;
    }

    /**
     * @dev Updates the gas limit for Chainlink VRF callback.
     * @param gasLimit The new gas limit.
     */
    function updateGasLimit(uint32 gasLimit) external onlyOwner {
        callbackGasLimit = gasLimit;
    }

    /**
     * @dev Updates the number of confirmations required for Chainlink VRF requests.
     * @param requestConfirmations_ The new number of confirmations required.
     */
    function updateRequestConfirmations(
        uint16 requestConfirmations_
    ) external onlyOwner {
        requestConfirmations = requestConfirmations_;
    }
}